class ApplicationController < ActionController::Base
  # Prevent CSRF attacks by raising an exception.
  # For APIs, you may want to use :null_session instead.
  protect_from_forgery with: :exception

  def after_sign_in_path_for(resource)
    request.env['omniauth.origin'] || root_path
  end
end
class ListsController < ApplicationController
  #before_action :require_login

  def index
    @list = List.new
    @lists = List.all
  end

  def show
    @list = List.find(params[:id])
    @task = Task.new
  end

  def new 
    @list = List.new
    @list.tasks.build
  end

  def create
    @list = List.new(list_params)
    if @list.save
      redirect_to @list
    else
      render :new
    end
  end

  def destroy
    @list = List.find(params[:id])
    @task = Task.find_by(params[:id])
    @task.destroy
    redirect_to @list
  end

  private

  def list_params
    params.require(:list).permit(:name, tasks_attributes: [:name, :status])
  end

  def require_login
    return head(:forbidden) unless session.include? :user_id    
  end
end
class ListsController < ApplicationController
  #before_action :require_login

  def index
    @list = List.new
    @lists = List.all
  end

  def show
    @list = List.find(params[:id])
    @task = Task.new
  end

  def new 
    @list = List.new
    @list.tasks.build
  end

  def create
    @list = List.new(list_params)
    if @list.save
      redirect_to @list
    else
      render :new
    end
  end

  def destroy
    @list = List.find(params[:id])
    @task = Task.find_by(params[:id])
    @task.destroy
    redirect_to @list
  end

  private

  def list_params
    params.require(:list).permit(:name, tasks_attributes: [:name, :status])
  end

  def require_login
    return head(:forbidden) unless session.include? :user_id    
  end
end
class Users::OmniauthCallbacksController < Devise::OmniauthCallbacksController
  def facebook
    @user = User.from_omniauth(request.env["omniauth.auth"])
    if @user.persisted?
      sign_in_and_redirect @user
    else
      redirect_to new_user_registration_path
    end       
  end
end
class List < ActiveRecord::Base
  has_many :tasks
  has_many :user_lists
  has_many :users, through: :user_lists

  validates_presence_of :name, uniqueness: true

  accepts_nested_attributes_for :tasks
end
class Task < ActiveRecord::Base
  belongs_to :list

  validates_presence_of :name
end
class User < ActiveRecord::Base
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable

     devise :omniauthable, :omniauth_providers => [:facebook]

  has_many :user_lists
  has_many :lists, through: :user_lists

  def self.from_omniauth(auth)
    where(provider: auth.provider, uid: auth.uid).first_or_create do |user|
      user.email = auth.info.email
      user.password = Devise.friendly_token[0,20]
    end      
  end
end
class UserList < ActiveRecord::Base
  belongs_to :user
  belongs_to :list
end

